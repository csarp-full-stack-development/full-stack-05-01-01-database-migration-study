// <auto-generated />
using System;
using Kreta.Backend.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Kreta.Backend.Migrations
{
    [DbContext(typeof(KretaMySqlContext))]
    partial class KretaMySqlContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Kreta.Shared.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Door")
                        .HasColumnType("int");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<int>("House")
                        .HasColumnType("int");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ParentId1")
                        .HasColumnType("char(36)");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<Guid?>("PublicScapeID")
                        .HasColumnType("char(36)");

                    b.Property<string>("PublicSpaceName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("StudentId1")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TeacherId1")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId1");

                    b.HasIndex("StudentId1");

                    b.HasIndex("TeacherId1");

                    b.ToTable("Addresss");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b79f4b7-c499-4aa7-b336-2c998552bd60"),
                            City = "Szeged",
                            Door = -1,
                            Floor = -1,
                            House = 10,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PostalCode = 6722,
                            PublicScapeID = new Guid("ed433722-96e7-4b44-9a63-1387afb88651"),
                            PublicSpaceName = "Szentháromság",
                            StudentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            TeacherId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("1f9170a0-c95c-42d2-ad53-3fc8486ec06c"),
                            City = "Szeged",
                            Door = -1,
                            Floor = -1,
                            House = 85,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PostalCode = 6724,
                            PublicScapeID = new Guid("8d457062-193e-4275-8167-9682b497674c"),
                            PublicSpaceName = "Kossuth Lajos",
                            StudentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            TeacherId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("c6889ac1-6a30-4456-8df3-8f6be9d4f418"),
                            City = "Szeged",
                            Door = -1,
                            Floor = -1,
                            House = 22,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PostalCode = 6722,
                            PublicScapeID = new Guid("8d457062-193e-4275-8167-9682b497674c"),
                            PublicSpaceName = "Boldogasszony",
                            StudentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            TeacherId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("c6521dc3-67bb-4bb0-91e8-287b37837d74"),
                            City = "Szeged",
                            Door = -1,
                            Floor = -1,
                            House = 56,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PostalCode = 6722,
                            PublicScapeID = new Guid("ed433722-96e7-4b44-9a63-1387afb88651"),
                            PublicSpaceName = "Zászló",
                            StudentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            TeacherId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("ffaea56a-5cfd-4da4-96db-c0f5a93d1865"),
                            City = "Szeged",
                            Door = -1,
                            Floor = -1,
                            House = 2,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PostalCode = 6724,
                            PublicScapeID = new Guid("8d457062-193e-4275-8167-9682b497674c"),
                            PublicSpaceName = "Kossuth Lajos",
                            StudentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            TeacherId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("5e984183-7237-413f-a06d-5b4b2ed8669e"),
                            City = "Szeged",
                            Door = -1,
                            Floor = -1,
                            House = 45,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PostalCode = 6722,
                            PublicScapeID = new Guid("ed433722-96e7-4b44-9a63-1387afb88651"),
                            PublicSpaceName = "Bokor",
                            StudentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            TeacherId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Kreta.Shared.Models.EducationLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("DurationOfEducation")
                        .HasColumnType("int");

                    b.Property<string>("StudentEducationLevel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("EducationLevels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("280cd533-b4ab-4f4f-9dee-1f57228e0dfd"),
                            DurationOfEducation = 4,
                            StudentEducationLevel = "érettségi"
                        },
                        new
                        {
                            Id = new Guid("aa29fb68-6f50-4681-8696-f0b6f1332c87"),
                            DurationOfEducation = 2,
                            StudentEducationLevel = "szakképzés"
                        });
                });

            modelBuilder.Entity("Kreta.Shared.Models.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("GradeText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("GradeValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeOfGrade")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TypeOfGrade")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("Kreta.Shared.Models.PublicSpace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("NameOfPublicSpace")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PublicSpaces");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ed433722-96e7-4b44-9a63-1387afb88651"),
                            NameOfPublicSpace = "utca"
                        },
                        new
                        {
                            Id = new Guid("61bacf9e-4341-4438-a1d3-a156aa743c26"),
                            NameOfPublicSpace = "tér"
                        },
                        new
                        {
                            Id = new Guid("8d457062-193e-4275-8167-9682b497674c"),
                            NameOfPublicSpace = "sugárút"
                        });
                });

            modelBuilder.Entity("Kreta.Shared.Models.SchoolCitizens.Parent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsWoman")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MathersName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("StudentOfParentId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Parents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3d35167e-164c-4408-8dd3-c3577ae9f4fe"),
                            AddressId = new Guid("5b79f4b7-c499-4aa7-b336-2c998552bd60"),
                            BirthDay = new DateTime(1998, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Virág",
                            IsWoman = true,
                            LastName = "Vas",
                            MathersName = "Érc Kitti",
                            PlaceOfBirth = "Szeged",
                            StudentOfParentId = new Guid("a39a2bf5-a123-4612-9bc2-26dd77e94cf8")
                        },
                        new
                        {
                            Id = new Guid("67e1cf26-e384-41e9-bd43-a5259ec6890c"),
                            BirthDay = new DateTime(1997, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Petra",
                            IsWoman = true,
                            LastName = "Pénzes",
                            MathersName = "Szegény Szandi",
                            PlaceOfBirth = "Kistelek",
                            StudentOfParentId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("bec98695-0f4c-4894-b7ed-41e3e06df0e1"),
                            AddressId = new Guid("1f9170a0-c95c-42d2-ad53-3fc8486ec06c"),
                            BirthDay = new DateTime(1995, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ferenc",
                            IsWoman = false,
                            LastName = "Fukar",
                            MathersName = "Adakozó Andor",
                            PlaceOfBirth = "Szeged",
                            StudentOfParentId = new Guid("a39a2bf5-a123-4612-9bc2-26dd77e94cf8")
                        },
                        new
                        {
                            Id = new Guid("a71ef195-4ca5-44ae-9f42-1f33f0ab897c"),
                            BirthDay = new DateTime(1994, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Fruzsi",
                            IsWoman = true,
                            LastName = "Fukar",
                            MathersName = "Adó Anna",
                            PlaceOfBirth = "Makó",
                            StudentOfParentId = new Guid("954bd97a-b13b-4505-9755-9132c0ed4490")
                        },
                        new
                        {
                            Id = new Guid("8e9e03c3-b161-4b6f-ab1d-eb51423f289f"),
                            BirthDay = new DateTime(1992, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Hedvig",
                            IsWoman = true,
                            LastName = "Hosszú",
                            MathersName = "Alacsony Anikó",
                            PlaceOfBirth = "Szeged",
                            StudentOfParentId = new Guid("31dcc48f-3e6b-45dc-bc1a-0a9dccf808eb")
                        },
                        new
                        {
                            Id = new Guid("b8b867e7-81f5-4aab-9193-dbeac9bf5a44"),
                            BirthDay = new DateTime(1992, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Milán",
                            IsWoman = false,
                            LastName = "Magas",
                            MathersName = "Alacsony Anikó",
                            PlaceOfBirth = "Deszk",
                            StudentOfParentId = new Guid("31dcc48f-3e6b-45dc-bc1a-0a9dccf808eb")
                        });
                });

            modelBuilder.Entity("Kreta.Shared.Models.SchoolCitizens.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("EducationLevelId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("FatherId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsSchoolClassSecretary")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWoman")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("MatherId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("MotherId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("SchoolClassID")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("EducationLevelId");

                    b.HasIndex("FatherId");

                    b.HasIndex("MatherId");

                    b.HasIndex("SchoolClassID");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a39a2bf5-a123-4612-9bc2-26dd77e94cf8"),
                            AddressId = new Guid("5b79f4b7-c499-4aa7-b336-2c998552bd60"),
                            BirthDay = new DateTime(2022, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EducationLevelId = new Guid("280cd533-b4ab-4f4f-9dee-1f57228e0dfd"),
                            FatherId = new Guid("bec98695-0f4c-4894-b7ed-41e3e06df0e1"),
                            FirstName = "János",
                            IsSchoolClassSecretary = false,
                            IsWoman = false,
                            LastName = "Jegy",
                            MotherId = new Guid("3d35167e-164c-4408-8dd3-c3577ae9f4fe"),
                            PlaceOfBirth = "Szeged",
                            SchoolClassID = new Guid("5fd266b6-441f-47a7-8d5f-85ac9955a840")
                        },
                        new
                        {
                            Id = new Guid("ce943ac9-6fb9-43d7-8362-093c8981b251"),
                            AddressId = new Guid("c6889ac1-6a30-4456-8df3-8f6be9d4f418"),
                            BirthDay = new DateTime(2021, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EducationLevelId = new Guid("aa29fb68-6f50-4681-8696-f0b6f1332c87"),
                            FirstName = "Nóra",
                            IsSchoolClassSecretary = false,
                            IsWoman = true,
                            LastName = "Nagy",
                            PlaceOfBirth = "Kiskunhalas",
                            SchoolClassID = new Guid("5fd266b6-441f-47a7-8d5f-85ac9955a840")
                        },
                        new
                        {
                            Id = new Guid("d6b65aa2-d848-4fcf-990a-1c23e7f976d5"),
                            AddressId = new Guid("00000000-0000-0000-0000-000000000000"),
                            BirthDay = new DateTime(2022, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EducationLevelId = new Guid("280cd533-b4ab-4f4f-9dee-1f57228e0dfd"),
                            FirstName = "Valér",
                            IsSchoolClassSecretary = false,
                            IsWoman = false,
                            LastName = "Vas",
                            PlaceOfBirth = "Makó",
                            SchoolClassID = new Guid("5fd266b6-441f-47a7-8d5f-85ac9955a840")
                        },
                        new
                        {
                            Id = new Guid("954bd97a-b13b-4505-9755-9132c0ed4490"),
                            AddressId = new Guid("00000000-0000-0000-0000-000000000000"),
                            BirthDay = new DateTime(2019, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EducationLevelId = new Guid("280cd533-b4ab-4f4f-9dee-1f57228e0dfd"),
                            FirstName = "Márta",
                            IsSchoolClassSecretary = false,
                            IsWoman = true,
                            LastName = "Kis",
                            MotherId = new Guid("a71ef195-4ca5-44ae-9f42-1f33f0ab897c"),
                            PlaceOfBirth = "Szabadka",
                            SchoolClassID = new Guid("3940133d-8201-4077-a2e0-4076653baa1f")
                        },
                        new
                        {
                            Id = new Guid("e459faf3-e556-467d-98f3-2c2a1b5fbeb3"),
                            AddressId = new Guid("c6521dc3-67bb-4bb0-91e8-287b37837d74"),
                            BirthDay = new DateTime(2017, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EducationLevelId = new Guid("aa29fb68-6f50-4681-8696-f0b6f1332c87"),
                            FirstName = "Milán",
                            IsSchoolClassSecretary = false,
                            IsWoman = false,
                            LastName = "Magas",
                            MotherId = new Guid("3d35167e-164c-4408-8dd3-c3577ae9f4fe"),
                            PlaceOfBirth = "Apátfalva",
                            SchoolClassID = new Guid("3940133d-8201-4077-a2e0-4076653baa1f")
                        },
                        new
                        {
                            Id = new Guid("4614b167-c52a-4cc8-8411-e67193c60744"),
                            AddressId = new Guid("00000000-0000-0000-0000-000000000000"),
                            BirthDay = new DateTime(2019, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EducationLevelId = new Guid("aa29fb68-6f50-4681-8696-f0b6f1332c87"),
                            FirstName = "Fruzsina",
                            IsSchoolClassSecretary = false,
                            IsWoman = false,
                            LastName = "Fukar",
                            PlaceOfBirth = "Miskolc",
                            SchoolClassID = new Guid("3940133d-8201-4077-a2e0-4076653baa1f")
                        },
                        new
                        {
                            Id = new Guid("31dcc48f-3e6b-45dc-bc1a-0a9dccf808eb"),
                            AddressId = new Guid("00000000-0000-0000-0000-000000000000"),
                            BirthDay = new DateTime(2019, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherId = new Guid("b8b867e7-81f5-4aab-9193-dbeac9bf5a44"),
                            FirstName = "Kinga",
                            IsSchoolClassSecretary = false,
                            IsWoman = false,
                            LastName = "Kilógó",
                            MotherId = new Guid("8e9e03c3-b161-4b6f-ab1d-eb51423f289f"),
                            PlaceOfBirth = "Miskolc",
                            SchoolClassID = new Guid("ef0b44cf-feb8-4593-b9c1-eaeda99d2f9b")
                        });
                });

            modelBuilder.Entity("Kreta.Shared.Models.SchoolCitizens.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("HeadTeacherForShoolClassId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsHeadTeacher")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWoman")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MathersName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b13f76ad-7692-4903-99db-73b7d0886e00"),
                            BirthDay = new DateTime(2000, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Martin",
                            HeadTeacherForShoolClassId = new Guid("5fd266b6-441f-47a7-8d5f-85ac9955a840"),
                            IsHeadTeacher = true,
                            IsWoman = false,
                            LastName = "Magyar",
                            MathersName = "Miskolci Mária",
                            PlaceOfBirth = "Miskolc"
                        },
                        new
                        {
                            Id = new Guid("2026851c-b5e6-40fc-bf3c-d7ed6248be1b"),
                            BirthDay = new DateTime(2000, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mirjam",
                            HeadTeacherForShoolClassId = new Guid("3940133d-8201-4077-a2e0-4076653baa1f"),
                            IsHeadTeacher = true,
                            IsWoman = true,
                            LastName = "Metek",
                            MathersName = "Egri Etelka",
                            PlaceOfBirth = "Eger"
                        },
                        new
                        {
                            Id = new Guid("2052b6e7-eda2-4e2b-b30a-6eed5fb9e141"),
                            AddressId = new Guid("ffaea56a-5cfd-4da4-96db-c0f5a93d1865"),
                            BirthDay = new DateTime(2000, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Feri",
                            HeadTeacherForShoolClassId = new Guid("ef0b44cf-feb8-4593-b9c1-eaeda99d2f9b"),
                            IsHeadTeacher = true,
                            IsWoman = false,
                            LastName = "Földrajz",
                            MathersName = "Szabadkai Szabina",
                            PlaceOfBirth = "Szabadka"
                        },
                        new
                        {
                            Id = new Guid("da14389a-acaf-4195-8404-34079d4ebfef"),
                            BirthDay = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Éva",
                            HeadTeacherForShoolClassId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsHeadTeacher = false,
                            IsWoman = true,
                            LastName = "Ének",
                            MathersName = "Bajai Betti",
                            PlaceOfBirth = "Baja"
                        },
                        new
                        {
                            Id = new Guid("d9687290-9896-4435-bff6-886f41fd6071"),
                            AddressId = new Guid("5e984183-7237-413f-a06d-5b4b2ed8669e"),
                            BirthDay = new DateTime(2000, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Adorján",
                            HeadTeacherForShoolClassId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsHeadTeacher = false,
                            IsWoman = false,
                            LastName = "Angol",
                            MathersName = "Kecskeméti Kati",
                            PlaceOfBirth = "Kecskemét"
                        });
                });

            modelBuilder.Entity("Kreta.Shared.Models.SchoolClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("HeadTeacherId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SchoolClassType")
                        .HasColumnType("int");

                    b.Property<int>("SchoolYear")
                        .HasColumnType("int");

                    b.Property<Guid?>("TypeOfEducationId")
                        .HasColumnType("char(36)");

                    b.Property<int>("YearOfEnrolment")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HeadTeacherId")
                        .IsUnique();

                    b.HasIndex("TypeOfEducationId");

                    b.ToTable("SchoolClasses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5fd266b6-441f-47a7-8d5f-85ac9955a840"),
                            HeadTeacherId = new Guid("b13f76ad-7692-4903-99db-73b7d0886e00"),
                            IsArchived = false,
                            SchoolClassType = 0,
                            SchoolYear = 9,
                            TypeOfEducationId = new Guid("2f0cb119-3ca8-4210-b793-7496e4aef9ec"),
                            YearOfEnrolment = 2025
                        },
                        new
                        {
                            Id = new Guid("3940133d-8201-4077-a2e0-4076653baa1f"),
                            HeadTeacherId = new Guid("2026851c-b5e6-40fc-bf3c-d7ed6248be1b"),
                            IsArchived = false,
                            SchoolClassType = 1,
                            SchoolYear = 10,
                            TypeOfEducationId = new Guid("b5f805e3-f709-4511-84fa-1f85cc87739f"),
                            YearOfEnrolment = 2024
                        },
                        new
                        {
                            Id = new Guid("ef0b44cf-feb8-4593-b9c1-eaeda99d2f9b"),
                            HeadTeacherId = new Guid("2052b6e7-eda2-4e2b-b30a-6eed5fb9e141"),
                            IsArchived = false,
                            SchoolClassType = 1,
                            SchoolYear = 14,
                            TypeOfEducationId = new Guid("225a1206-e126-4d00-ad8c-f73bf2f7b345"),
                            YearOfEnrolment = 2024
                        });
                });

            modelBuilder.Entity("Kreta.Shared.Models.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("CompulsoryExaminationSubject")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("OptionalExaminationSubject")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("SubjectTypeId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7f4a6c22-239f-4196-9f86-bc922b9e13eb"),
                            CompulsoryExaminationSubject = false,
                            OptionalExaminationSubject = true,
                            ShortName = "Föci",
                            SubjectName = "Földrajz",
                            SubjectTypeId = new Guid("545d2e5a-6280-4c14-876c-0ce748ca2454")
                        },
                        new
                        {
                            Id = new Guid("931e1a73-e161-41fb-a9a7-e3a11e4c61fe"),
                            CompulsoryExaminationSubject = true,
                            OptionalExaminationSubject = false,
                            ShortName = "Angol",
                            SubjectName = "Angol",
                            SubjectTypeId = new Guid("3c15c176-7329-4605-8eab-229ebd71b440")
                        },
                        new
                        {
                            Id = new Guid("e64ca130-b0a9-41c4-8f80-a002bbff3949"),
                            CompulsoryExaminationSubject = false,
                            OptionalExaminationSubject = false,
                            ShortName = "Market",
                            SubjectName = "Marketing",
                            SubjectTypeId = new Guid("3ac5d784-7081-4ddd-a65d-fa68048ddcc6")
                        });
                });

            modelBuilder.Entity("Kreta.Shared.Models.SubjectType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("SubjectTypeName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SubjectTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("545d2e5a-6280-4c14-876c-0ce748ca2454"),
                            SubjectTypeName = "Természettudomány"
                        },
                        new
                        {
                            Id = new Guid("3c15c176-7329-4605-8eab-229ebd71b440"),
                            SubjectTypeName = "Idegen nyelv"
                        },
                        new
                        {
                            Id = new Guid("3ac5d784-7081-4ddd-a65d-fa68048ddcc6"),
                            SubjectTypeName = "Közgazdaságtan"
                        });
                });

            modelBuilder.Entity("Kreta.Shared.Models.SwitchTable.SchoolClassStudents", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly?>("DateOfEnrolment")
                        .HasColumnType("date");

                    b.Property<Guid>("SchoolClassId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("StudnetId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("SchoolClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("SchoolClassStudents");
                });

            modelBuilder.Entity("Kreta.Shared.Models.SwitchTable.SchoolClassSubjects", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsTheHoursInOne")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NumberOfHours")
                        .HasColumnType("int");

                    b.Property<Guid>("SchoolClassId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("SchoolClassId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SchoolClassSubjects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("13423e8b-494b-4687-a254-d307ae84265a"),
                            IsTheHoursInOne = false,
                            NumberOfHours = 3,
                            SchoolClassId = new Guid("5fd266b6-441f-47a7-8d5f-85ac9955a840"),
                            SubjectId = new Guid("7f4a6c22-239f-4196-9f86-bc922b9e13eb")
                        },
                        new
                        {
                            Id = new Guid("3c3a911e-84cb-4d5a-9186-7d183b2a5b98"),
                            IsTheHoursInOne = true,
                            NumberOfHours = 1,
                            SchoolClassId = new Guid("5fd266b6-441f-47a7-8d5f-85ac9955a840"),
                            SubjectId = new Guid("e64ca130-b0a9-41c4-8f80-a002bbff3949")
                        },
                        new
                        {
                            Id = new Guid("af44e7ff-c1fe-41ad-a446-425a085c4f5a"),
                            IsTheHoursInOne = false,
                            NumberOfHours = 2,
                            SchoolClassId = new Guid("3940133d-8201-4077-a2e0-4076653baa1f"),
                            SubjectId = new Guid("931e1a73-e161-41fb-a9a7-e3a11e4c61fe")
                        },
                        new
                        {
                            Id = new Guid("e932a713-770e-4e08-96f3-a79d0decf4d4"),
                            IsTheHoursInOne = false,
                            NumberOfHours = 2,
                            SchoolClassId = new Guid("ef0b44cf-feb8-4593-b9c1-eaeda99d2f9b"),
                            SubjectId = new Guid("7f4a6c22-239f-4196-9f86-bc922b9e13eb")
                        },
                        new
                        {
                            Id = new Guid("6a1c277e-a204-48d6-9486-3ff3d098440d"),
                            IsTheHoursInOne = true,
                            NumberOfHours = 2,
                            SchoolClassId = new Guid("ef0b44cf-feb8-4593-b9c1-eaeda99d2f9b"),
                            SubjectId = new Guid("931e1a73-e161-41fb-a9a7-e3a11e4c61fe")
                        },
                        new
                        {
                            Id = new Guid("b06fce01-16ad-440a-9486-c6a301343ea8"),
                            IsTheHoursInOne = false,
                            NumberOfHours = 4,
                            SchoolClassId = new Guid("ef0b44cf-feb8-4593-b9c1-eaeda99d2f9b"),
                            SubjectId = new Guid("e64ca130-b0a9-41c4-8f80-a002bbff3949")
                        });
                });

            modelBuilder.Entity("Kreta.Shared.Models.SwitchTable.TeachersTeachInSchoolClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsTheHoursInOne")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NumberOfHours")
                        .HasColumnType("int");

                    b.Property<Guid>("SchoolClassId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("SchoolClassId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherTeachInSchoolClass");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e4fd4cdb-31d3-4d26-9c96-6aa8b6eb0e23"),
                            IsTheHoursInOne = false,
                            NumberOfHours = 3,
                            SchoolClassId = new Guid("3940133d-8201-4077-a2e0-4076653baa1f"),
                            TeacherId = new Guid("d9687290-9896-4435-bff6-886f41fd6071")
                        },
                        new
                        {
                            Id = new Guid("f30e5ab7-3e93-4a66-8794-caaea005ffa9"),
                            IsTheHoursInOne = false,
                            NumberOfHours = 2,
                            SchoolClassId = new Guid("5fd266b6-441f-47a7-8d5f-85ac9955a840"),
                            TeacherId = new Guid("d9687290-9896-4435-bff6-886f41fd6071")
                        },
                        new
                        {
                            Id = new Guid("790f2278-13bb-421c-bef1-0722e78448d4"),
                            IsTheHoursInOne = true,
                            NumberOfHours = 3,
                            SchoolClassId = new Guid("3940133d-8201-4077-a2e0-4076653baa1f"),
                            TeacherId = new Guid("da14389a-acaf-4195-8404-34079d4ebfef")
                        });
                });

            modelBuilder.Entity("Kreta.Shared.Models.TypeOfEducation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("EducationName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TypeOfEducations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2f0cb119-3ca8-4210-b793-7496e4aef9ec"),
                            EducationName = "Szoftverfejlesztő és -tesztelő"
                        },
                        new
                        {
                            Id = new Guid("b5f805e3-f709-4511-84fa-1f85cc87739f"),
                            EducationName = "Idegen nyelvű ipari és kereskedelmi technikus"
                        },
                        new
                        {
                            Id = new Guid("225a1206-e126-4d00-ad8c-f73bf2f7b345"),
                            EducationName = "Vállalkozási ügyviteli ügyintéző"
                        });
                });

            modelBuilder.Entity("Kreta.Shared.Models.Address", b =>
                {
                    b.HasOne("Kreta.Shared.Models.SchoolCitizens.Parent", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId1");

                    b.HasOne("Kreta.Shared.Models.SchoolCitizens.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId1");

                    b.HasOne("Kreta.Shared.Models.SchoolCitizens.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId1");

                    b.Navigation("Parent");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Kreta.Shared.Models.SchoolCitizens.Student", b =>
                {
                    b.HasOne("Kreta.Shared.Models.EducationLevel", "EducationLevel")
                        .WithMany("Students")
                        .HasForeignKey("EducationLevelId");

                    b.HasOne("Kreta.Shared.Models.SchoolCitizens.Parent", "Father")
                        .WithMany()
                        .HasForeignKey("FatherId");

                    b.HasOne("Kreta.Shared.Models.SchoolCitizens.Parent", "Mather")
                        .WithMany()
                        .HasForeignKey("MatherId");

                    b.HasOne("Kreta.Shared.Models.SchoolClass", "SchoolClass")
                        .WithMany("StudentsOfClass")
                        .HasForeignKey("SchoolClassID");

                    b.Navigation("EducationLevel");

                    b.Navigation("Father");

                    b.Navigation("Mather");

                    b.Navigation("SchoolClass");
                });

            modelBuilder.Entity("Kreta.Shared.Models.SchoolClass", b =>
                {
                    b.HasOne("Kreta.Shared.Models.SchoolCitizens.Teacher", "HeadTeacher")
                        .WithOne("HeadTeacherFoClass")
                        .HasForeignKey("Kreta.Shared.Models.SchoolClass", "HeadTeacherId");

                    b.HasOne("Kreta.Shared.Models.TypeOfEducation", "TypeOfEducation")
                        .WithMany("SchoolClasses")
                        .HasForeignKey("TypeOfEducationId");

                    b.Navigation("HeadTeacher");

                    b.Navigation("TypeOfEducation");
                });

            modelBuilder.Entity("Kreta.Shared.Models.SwitchTable.SchoolClassStudents", b =>
                {
                    b.HasOne("Kreta.Shared.Models.SchoolClass", "SchoolClass")
                        .WithMany()
                        .HasForeignKey("SchoolClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kreta.Shared.Models.SchoolCitizens.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("SchoolClass");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Kreta.Shared.Models.SwitchTable.SchoolClassSubjects", b =>
                {
                    b.HasOne("Kreta.Shared.Models.SchoolClass", "SchoolClass")
                        .WithMany("SchoolClassSubjects")
                        .HasForeignKey("SchoolClassId");

                    b.HasOne("Kreta.Shared.Models.Subject", "Subject")
                        .WithMany("SchoolClassSubjects")
                        .HasForeignKey("SubjectId");

                    b.Navigation("SchoolClass");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Kreta.Shared.Models.SwitchTable.TeachersTeachInSchoolClass", b =>
                {
                    b.HasOne("Kreta.Shared.Models.SchoolClass", "SchoolClassWhoTeacherTeach")
                        .WithMany("TeacherWhoTeachInSchoolClass")
                        .HasForeignKey("SchoolClassId");

                    b.HasOne("Kreta.Shared.Models.SchoolCitizens.Teacher", "TeacherTeachInScoolClass")
                        .WithMany("SchoolClassWhereTeacherTeach")
                        .HasForeignKey("TeacherId");

                    b.Navigation("SchoolClassWhoTeacherTeach");

                    b.Navigation("TeacherTeachInScoolClass");
                });

            modelBuilder.Entity("Kreta.Shared.Models.EducationLevel", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Kreta.Shared.Models.SchoolCitizens.Teacher", b =>
                {
                    b.Navigation("HeadTeacherFoClass");

                    b.Navigation("SchoolClassWhereTeacherTeach");
                });

            modelBuilder.Entity("Kreta.Shared.Models.SchoolClass", b =>
                {
                    b.Navigation("SchoolClassSubjects");

                    b.Navigation("StudentsOfClass");

                    b.Navigation("TeacherWhoTeachInSchoolClass");
                });

            modelBuilder.Entity("Kreta.Shared.Models.Subject", b =>
                {
                    b.Navigation("SchoolClassSubjects");
                });

            modelBuilder.Entity("Kreta.Shared.Models.TypeOfEducation", b =>
                {
                    b.Navigation("SchoolClasses");
                });
#pragma warning restore 612, 618
        }
    }
}
